(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require("./modules/card.js");
var _productShow = require("./modules/product-show.js");
(0, _productShow.addShowbuttonListener)();

},{"./modules/card.js":2,"./modules/product-show.js":7}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderCards = void 0;
var _mock = require("./mock.js");
var _objects = require("./objects.js");
var _priceUpdate = require("./price-update.js");
var _counter = require("./counter.js");
var _total = require("./total.js");
var cardTemplate = document.querySelector('#card').content.querySelector('.card');
var setCardDataId = function setCardDataId(card, data) {
  card.dataset.id = data.id;
};
var getWarningAboutAmount = function getWarningAboutAmount(card, amount) {
  if (amount <= _objects.LOW_PRODUCT_AMOUNT) {
    card.querySelector('.card__amount-warning').textContent = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C ".concat(amount, " \u0448\u0442.");
  }
};
var getDeleteCard = function getDeleteCard(card) {
  card.querySelector('.card__delete').addEventListener('click', function (evt) {
    (0, _counter.removeCounter)(card);
    evt.target.closest('.card').remove();
  }, true);
};
var getCardProperties = function getCardProperties(card, properties) {
  var propertisContainer = card.querySelector('.card__properties');
  properties.forEach(function (element) {
    var newPropertis = document.createElement('span');
    newPropertis.classList.add('card__property');
    newPropertis.textContent = element;
    propertisContainer.append(newPropertis);
  });
};
var getCard = function getCard(element) {
  var cardElement = cardTemplate.cloneNode('true');
  setCardDataId(cardElement, element);
  cardElement.querySelector('.card__img').src = "img/cards/".concat(element.id, "-product.jpg");
  cardElement.querySelector('.card__title').textContent = element.title;
  cardElement.querySelector('.card__stock').textContent = element.stock;
  getCardProperties(cardElement, element.properties);
  cardElement.querySelector('.card__manufacturer').textContent = element.manufacturer;
  cardElement.querySelector('.counter__input').value = element.amount;
  getWarningAboutAmount(cardElement, element.amountLeft);
  (0, _priceUpdate.updatePrice)(cardElement, element);
  return cardElement;
};
var renderCards = function renderCards(cards, place) {
  var fragment = document.createDocumentFragment();
  cards.forEach(function (card) {
    var newCard = getCard(card);
    (0, _counter.addCounter)(newCard);
    getDeleteCard(newCard);
    (0, _total.setSelectedCardListiner)(newCard);
    fragment.append(newCard);
  });
  place.append(fragment);
};
exports.renderCards = renderCards;
renderCards(_mock.CARDS, document.querySelector('.product__card-container'));

},{"./counter.js":3,"./mock.js":4,"./objects.js":5,"./price-update.js":6,"./total.js":9}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeCounter = exports.addCounter = void 0;
var _mock = require("./mock.js");
var _priceUpdate = require("./price-update.js");
var _searchCard = require("./search-card.js");
var _total = require("./total.js");
var startsCounting = function startsCounting(event) {
  var target = event.target;
  var indicator = target.closest('.counter').querySelector('.counter__input');
  var add = target.closest('.counter').querySelector('.counter__button--plus');
  var minus = target.closest('.counter').querySelector('.counter__button--minus');
  var card = target.closest('.card');
  var priceIndicatorContainer = target.closest('.card').querySelector('.card__price-container');
  var currentCardData = (0, _searchCard.searchCard)(target, _mock.CARDS);
  var value = indicator.value;
  var isAddition = true;
  if (target.closest('.counter__button--plus')) {
    value++;
  }
  if (target.closest('.counter__button--minus')) {
    value--;
    isAddition = false;
  }
  if (value > 0 && value <= currentCardData.amountLeft) {
    (0, _total.updateTotalPrice)(card, isAddition);
  }
  if (value < 0) {
    value = 0;
    minus.classList.add('counter__button--disabled');
  } else {
    minus.classList.remove('counter__button--disabled');
  }
  if (value > currentCardData.amountLeft) {
    value = currentCardData.amountLeft;
    add.classList.add('counter__button--disabled');
  } else {
    add.classList.remove('counter__button--disabled');
  }
  currentCardData.amount = value;
  indicator.value = value;
  (0, _priceUpdate.updatePrice)(priceIndicatorContainer, currentCardData);
};
var addCounter = function addCounter(card) {
  var counter = card.querySelector('[data-counter]');
  counter.addEventListener('click', startsCounting);
};
exports.addCounter = addCounter;
var removeCounter = function removeCounter(card) {
  var counter = card.querySelector('[data-counter]');
  counter.removeEventListener('click', startsCounting);
};
exports.removeCounter = removeCounter;

},{"./mock.js":4,"./price-update.js":6,"./search-card.js":8,"./total.js":9}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CARDS = exports.CARD = void 0;
var CARDS = [{
  id: 1,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: 'OOO Вайлдберриз',
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
}, {
  id: 2,
  title: 'Силиконовый чехол картхолдер (отверстия) для карт, прозрачный кейс бампер на Apple iPhone XR, MobiSafe',
  properties: ['Цвет: прозрачный'],
  stock: 'Коледино WB',
  manufacturer: 'OOO Мегапрофстиль',
  amount: 200,
  actualPrice: 10500.235,
  oldPrice: 11500.235,
  amountLeft: 1000
}, {
  id: 3,
  title: 'Карандаши цветные Faber-Castell "Замок", набор 24 цвета, заточенные, шестигранные,Faber-Castell',
  properties: [],
  stock: 'Коледино WB',
  manufacturer: 'OOO Вайлдберриз',
  amount: 2,
  actualPrice: 247,
  oldPrice: 475,
  amountLeft: 2
}];

// id
// title
// [properties]
// stock
// manufacturer
// amount
// price-per-unit
// old-price-per-unit
exports.CARDS = CARDS;
var CARD = {
  id: 1,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: 'OOO Вайлдберриз',
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
};
exports.CARD = CARD;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.total = exports.basket = exports.LOW_PRODUCT_AMOUNT = void 0;
var LOW_PRODUCT_AMOUNT = 5;
exports.LOW_PRODUCT_AMOUNT = LOW_PRODUCT_AMOUNT;
var basket = document.querySelector('.basket');
exports.basket = basket;
var total = basket.querySelector('.total');
exports.total = total;

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePrice = void 0;
var updatePrice = function updatePrice(priceContainer, data) {
  var actualPrice = priceContainer.querySelector('.card__actual-price');
  var oldPrice = priceContainer.querySelector('.card__past-price');
  actualPrice.textContent = "".concat(Math.ceil(data.amount * data.actualPrice), " \u0441\u043E\u043C");
  oldPrice.textContent = "".concat(Math.ceil(data.amount * data.oldPrice), " \u0441\u043E\u043C");
  if ((data.amount * data.actualPrice).toString().length > 5) {
    actualPrice.classList.add('card__actual-price--smaller-letter');
  } else {
    actualPrice.classList.remove('card__actual-price--smaller-letter');
  }
};
exports.updatePrice = updatePrice;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addShowbuttonListener = void 0;
var _objects = require("./objects.js");
var showCardButton = _objects.basket.querySelector('.product__show-button');
var productBasketContainer = _objects.basket.querySelector('.product__card-container');
var addShowbuttonListener = function addShowbuttonListener() {
  showCardButton.addEventListener('click', function () {
    showCardButton.classList.toggle('product__show-button--close');
    productBasketContainer.classList.toggle('visually-hidden');
  });
};
exports.addShowbuttonListener = addShowbuttonListener;

},{"./objects.js":5}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.searchCard = void 0;
var searchCard = function searchCard(element, cards) {
  var id = element.closest('.card').dataset.id;
  return cards.find(function (card) {
    return card.id === +id;
  });
};
exports.searchCard = searchCard;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateTotalPrice = exports.setSelectedCardListiner = void 0;
var _objects = require("./objects");
var _mock = require("./mock");
var updateTotalPrice = function updateTotalPrice(card, isAddition) {
  var totalField = _objects.total.querySelector('.total__amount');
  var discountField = _objects.total.querySelector('.total__discount');
  var id = card.dataset.id - 1;
  if (isAddition) {
    totalField.textContent = +totalField.textContent + _mock.CARDS[id].actualPrice * _mock.CARDS[id].amount;
    discountField.textContent = +discountField.textContent + _mock.CARDS[id].oldPrice * _mock.CARDS[id].amount;
  } else {
    totalField.textContent = +totalField.textContent - _mock.CARDS[id].actualPrice * _mock.CARDS[id].amount;
    discountField.textContent = +discountField.textContent - _mock.CARDS[id].oldPrice * _mock.CARDS[id].amount;
  }
  console.log(_mock.CARDS[id].actualPrice * _mock.CARDS[id].amount);
  console.log('card');
};
exports.updateTotalPrice = updateTotalPrice;
var setSelectedCardListiner = function setSelectedCardListiner(card) {
  var checkbox = card.querySelector('.checkbox__input');
  checkbox.addEventListener('change', function (event) {
    var product = event.target.closest('.card');
    if (event.target.checked) {
      updateTotalPrice(product, true);
    } else {
      updateTotalPrice(product, false);
    }
  });
};
exports.setSelectedCardListiner = setSelectedCardListiner;

},{"./mock":4,"./objects":5}]},{},[1])


//# sourceMappingURL=main.min.js.map
