(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require("./modules/card.js");
require("./modules/modal.js");
var _productShow = require("./modules/product-show.js");
(0, _productShow.addShowbuttonListener)();

},{"./modules/card.js":2,"./modules/modal.js":5,"./modules/product-show.js":8}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderCards = void 0;
var _mock = require("./mock.js");
var _objects = require("./objects.js");
var _priceUpdate = require("./price-update.js");
var _counter = require("./counter.js");
var _total = require("./total.js");
var cardTemplate = document.querySelector('#card').content.querySelector('.card');
var makerCardTemplate = document.querySelector('#maker').content.querySelector('.maker');
var getMakerCard = function getMakerCard(card, data) {
  var makerCard = makerCardTemplate.cloneNode('true');
  var makerPlace = card.querySelector('.card__manufacturer-link');
  makerCard.querySelector('.maker__name').textContent = data.manufacturer.name;
  makerCard.querySelector('.maker__id').textContent = data.manufacturer.id;
  makerCard.querySelector('.maker__address').textContent = data.manufacturer.address;
  makerPlace.append(makerCard);
};
var setCardDataId = function setCardDataId(card, data) {
  card.dataset.id = data.id;
};
var getWarningAboutAmount = function getWarningAboutAmount(card, amount) {
  if (amount <= _objects.LOW_PRODUCT_AMOUNT) {
    card.querySelector('.card__amount-warning').textContent = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C ".concat(amount, " \u0448\u0442.");
  }
};
var getDeleteCard = function getDeleteCard(card) {
  card.querySelector('.card__delete').addEventListener('click', function (evt) {
    (0, _counter.removeCounter)(card);
    evt.target.closest('.card').remove();
    (0, _total.updateTotalPrice)();
  }, true);
};
var getCardProperties = function getCardProperties(card, properties) {
  var propertisContainer = card.querySelector('.card__properties');
  properties.forEach(function (element) {
    var newPropertis = document.createElement('span');
    newPropertis.classList.add('card__property');
    newPropertis.textContent = element;
    propertisContainer.append(newPropertis);
  });
};
var getCard = function getCard(element) {
  var cardElement = cardTemplate.cloneNode('true');
  setCardDataId(cardElement, element);
  cardElement.querySelector('.card__img').src = "img/cards/".concat(element.id, "-product.jpg");
  cardElement.querySelector('.card__title').textContent = element.title;
  cardElement.querySelector('.card__stock').textContent = element.stock;
  getCardProperties(cardElement, element.properties);
  cardElement.querySelector('.card__manufacturer').textContent = element.manufacturer.name;
  cardElement.querySelector('.counter__input').value = element.amount;
  getWarningAboutAmount(cardElement, element.amountLeft);
  (0, _priceUpdate.updatePrice)(cardElement, element);
  return cardElement;
};
var renderCards = function renderCards(cards, place) {
  var fragment = document.createDocumentFragment();
  cards.forEach(function (card) {
    var newCard = getCard(card);
    (0, _counter.addCounter)(newCard);
    getDeleteCard(newCard);
    getMakerCard(newCard, card);
    fragment.append(newCard);
    (0, _total.setSelectedCardListiner)(newCard);
  });
  place.append(fragment);
};
exports.renderCards = renderCards;
renderCards(_mock.CARDS, document.querySelector('.product__card-container'));

},{"./counter.js":3,"./mock.js":4,"./objects.js":6,"./price-update.js":7,"./total.js":10}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeCounter = exports.addCounter = void 0;
var _mock = require("./mock.js");
var _priceUpdate = require("./price-update.js");
var _searchCard = require("./search-card.js");
var _total = require("./total.js");
var startsCounting = function startsCounting(event) {
  var target = event.target;
  var indicator = target.closest('.counter').querySelector('.counter__input');
  var add = target.closest('.counter').querySelector('.counter__button--plus');
  var minus = target.closest('.counter').querySelector('.counter__button--minus');
  var priceIndicatorContainer = target.closest('.card').querySelector('.card__price-container');
  var currentCardData = (0, _searchCard.searchCard)(target, _mock.CARDS);
  var value = indicator.value;
  if (target.closest('.counter__button--plus')) {
    value++;
  }
  if (target.closest('.counter__button--minus')) {
    value--;
  }
  if (value < 0) {
    value = 0;
    minus.classList.add('counter__button--disabled');
  } else {
    minus.classList.remove('counter__button--disabled');
  }
  if (value > currentCardData.amountLeft) {
    value = currentCardData.amountLeft;
    add.classList.add('counter__button--disabled');
  } else {
    add.classList.remove('counter__button--disabled');
  }
  currentCardData.amount = value;
  indicator.value = value;
  (0, _priceUpdate.updatePrice)(priceIndicatorContainer, currentCardData);
  (0, _total.updateTotalPrice)();
};
var addCounter = function addCounter(card) {
  var counter = card.querySelector('[data-counter]');
  counter.addEventListener('click', startsCounting);
};
exports.addCounter = addCounter;
var removeCounter = function removeCounter(card) {
  var counter = card.querySelector('[data-counter]');
  counter.removeEventListener('click', startsCounting);
};
exports.removeCounter = removeCounter;

},{"./mock.js":4,"./price-update.js":7,"./search-card.js":9,"./total.js":10}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PROFILE = exports.CARDS = exports.CARD = void 0;
var CARDS = [{
  id: 1,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO Вайлдберриз',
    id: 1067746062449,
    address: '142181,Московская обл, г.о. Подольск, д Коледино, тер. Индустриальный парк Коледино, д. 6, стр. 1',
    url: ' '
  },
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
}, {
  id: 2,
  title: 'Силиконовый чехол картхолдер (отверстия) для карт, прозрачный кейс бампер на Apple iPhone XR, MobiSafe',
  properties: ['Цвет: прозрачный'],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO «МЕГАПРОФСТИЛЬ»',
    id: 5167746237148,
    address: '129337, Москва, улица Красная Сосна, 2, корпус 1, стр. 1, помещение 2, офис 34',
    url: ' '
  },
  amount: 200,
  actualPrice: 10500.235,
  oldPrice: 11500.235,
  amountLeft: 1000
}, {
  id: 3,
  title: 'Карандаши цветные Faber-Castell "Замок", набор 24 цвета, заточенные, шестигранные,Faber-Castell',
  properties: [],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO Вайлдберриз',
    id: 1067746062449,
    address: '142181,Московская обл, г.о. Подольск, д Коледино, тер. Индустриальный парк Коледино, д. 6, стр. 1',
    url: ' '
  },
  amount: 2,
  actualPrice: 247,
  oldPrice: 475,
  amountLeft: 2
}];

// id
// title
// [properties]
// stock
// manufacturer:{name,id,address}
// amount
// price-per-unit
// old-price-per-unit
exports.CARDS = CARDS;
var PROFILE = {
  isPickup: true,
  addressPickup: [],
  address: [],
  cards: []
};
exports.PROFILE = PROFILE;
var CARD = {
  id: 1,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: 'OOO Вайлдберриз',
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
};
exports.CARD = CARD;

},{}],5:[function(require,module,exports){
"use strict";

var _objects = require("./objects");
var deliveryDestinationModalButton = document.querySelector('.delivery__address-setting-button');
var deliveryDestinationModal = document.querySelector('.modal__delivery');
var modals = document.querySelectorAll('[data-modal]');
modals.forEach(function (element) {
  element.querySelector('.modal__close-button').addEventListener('click', closeModal);
});
function closeModal(event) {
  event.target.closest('[data-modal]').classList.remove('modal__open');
  document.removeEventListener('keydown', onDocumentKeydown);
  event.target.closest('.modal').classList.remove('modal__curtain-open');
}
var openModal = function openModal(modal) {
  modal.classList.add('modal__open');
  modal.closest('.modal').classList.add('modal__curtain-open');
  document.addEventListener('keydown', onDocumentKeydown);
};
function onDocumentKeydown(event) {
  if ((0, _objects.isEscapeKey)(event)) {
    event.preventDefault();
    closeModal(event);
  }
}
deliveryDestinationModalButton.addEventListener('click', function () {
  openModal(deliveryDestinationModal);
});

},{"./objects":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.total = exports.isEscapeKey = exports.basket = exports.MIN_FREE_ORDER_TOTAL_PRICE = exports.LOW_PRODUCT_AMOUNT = void 0;
var LOW_PRODUCT_AMOUNT = 5;
exports.LOW_PRODUCT_AMOUNT = LOW_PRODUCT_AMOUNT;
var MIN_FREE_ORDER_TOTAL_PRICE = 1;
exports.MIN_FREE_ORDER_TOTAL_PRICE = MIN_FREE_ORDER_TOTAL_PRICE;
var basket = document.querySelector('.basket');
exports.basket = basket;
var total = basket.querySelector('.total');
exports.total = total;
var isEscapeKey = function isEscapeKey(event) {
  return event.key === 'Escape';
};
exports.isEscapeKey = isEscapeKey;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePrice = void 0;
var updatePrice = function updatePrice(priceContainer, data) {
  var actualPrice = priceContainer.querySelector('.card__actual-price');
  var oldPrice = priceContainer.querySelector('.card__past-price');
  actualPrice.textContent = "".concat(Math.ceil(data.amount * data.actualPrice), " \u0441\u043E\u043C");
  oldPrice.textContent = "".concat(Math.ceil(data.amount * data.oldPrice), " \u0441\u043E\u043C");
  if ((data.amount * data.actualPrice).toString().length > 5) {
    actualPrice.classList.add('card__actual-price--smaller-letter');
  } else {
    actualPrice.classList.remove('card__actual-price--smaller-letter');
  }
};
exports.updatePrice = updatePrice;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addShowbuttonListener = void 0;
var _objects = require("./objects.js");
var showCardButton = _objects.basket.querySelector('.product__show-button');
var productBasketContainer = _objects.basket.querySelector('.product__card-container');
var addShowbuttonListener = function addShowbuttonListener() {
  showCardButton.addEventListener('click', function () {
    showCardButton.classList.toggle('product__show-button--close');
    productBasketContainer.classList.toggle('visually-hidden');
  });
};
exports.addShowbuttonListener = addShowbuttonListener;

},{"./objects.js":6}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.searchCard = void 0;
var searchCard = function searchCard(element, cards) {
  var id = element.closest('.card').dataset.id;
  return cards.find(function (card) {
    return card.id === +id;
  });
};
exports.searchCard = searchCard;

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateTotalPrice = exports.setSelectedCardListiner = void 0;
var _mock = require("./mock");
var _objects = require("./objects");
var prettierPrice = function prettierPrice(total) {
  var totalArray = Math.ceil(total).toString().split('');
  for (var i = totalArray.length; i > 0; i--) {
    if (i % 3 === 0) {
      totalArray.splice(totalArray.length - i, 0, ' ');
    }
  }
  return totalArray.join('').trim();
};
var isDeliveryFree = function isDeliveryFree(total) {
  return total > _objects.MIN_FREE_ORDER_TOTAL_PRICE ? 'Бесплатно' : prettierPrice(total);
};
var prettierAmount = function prettierAmount(amount) {
  var add;
  switch (amount) {
    case 0:
      add = 'товаров';
      break;
    case 1:
      add = 'товар';
      break;
    default:
      add = 'товара';
  }
  return amount + ' ' + add;
};
var updateTotalPrice = function updateTotalPrice() {
  var totalAmountField = document.querySelector('.total__amount-product');
  var totalField = document.querySelector('.total__price');
  var discountField = document.querySelector('.total__without-discount');
  var cards = document.querySelectorAll('.card');
  var profitField = document.querySelector('.total__discount');
  var deliveryField = document.querySelector('.total__delivery-price');
  var total = 0;
  var oldPrice = 0;
  var amount = 0;
  cards.forEach(function (element) {
    var id = element.dataset.id;
    if (element.querySelector('.checkbox__input').checked) {
      total = total + _mock.CARDS[id - 1].amount * _mock.CARDS[id - 1].actualPrice;
      oldPrice = oldPrice + _mock.CARDS[id - 1].amount * _mock.CARDS[id - 1].oldPrice;
      amount = amount + _mock.CARDS[id - 1].amount;
    }
  });
  profitField.textContent = '-' + prettierPrice(oldPrice - total);
  totalAmountField.textContent = prettierAmount(amount);
  totalField.textContent = prettierPrice(total);
  discountField.textContent = prettierPrice(oldPrice);
  deliveryField.textContent = isDeliveryFree(total);
};
exports.updateTotalPrice = updateTotalPrice;
var setSelectedCardListiner = function setSelectedCardListiner(card) {
  var checkbox = card.querySelector('.checkbox__input');
  checkbox.addEventListener('change', function () {
    updateTotalPrice();
  });
};
exports.setSelectedCardListiner = setSelectedCardListiner;

},{"./mock":4,"./objects":6}]},{},[1])


//# sourceMappingURL=main.min.js.map
