(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

require("./modules/card.js");
require("./modules/modal.js");
require("./modules/address.js");
require("./modules/payment.js");
require("./modules/delivery-date.js");
var _productShow = require("./modules/product-show.js");
(0, _productShow.addShowButtonListener)();
(0, _productShow.addShowButtonNotAvalibleListener)();

},{"./modules/address.js":2,"./modules/card.js":3,"./modules/delivery-date.js":5,"./modules/modal.js":7,"./modules/payment.js":9,"./modules/product-show.js":11}],2:[function(require,module,exports){
"use strict";

var _mock = require("./mock");
var addressTemplate = document.querySelector('#address').content.querySelector('.address');
var addressPlace = document.querySelector('.modal__delivery-address');
var addressInTotal = document.querySelector('.delivery__address');
var addressTypeInTotal = document.querySelector('.delivery__address-type');
var deliveryTypesFields = document.querySelector('.modal__delivery-setting-container');
var addressInBusketWhere = document.querySelector('.delivery-type__where');
var addressInBusketaddress = document.querySelector('.delivery-type__address');
var addressInBusketRating = document.querySelector('.delivery-type__rating');
var addressInBusketTime = document.querySelector('.delivery-type__work-time');
var updateRatingTimeAddress = function updateRatingTimeAddress(data) {
  addressInBusketRating.textContent = data.rating;
  addressInBusketTime.textContent = "\u0415\u0436\u0435\u0434\u043D\u0435\u0432\u043D\u043E \u0441 ".concat(data.workstart, " \u0434\u043E ").concat(data.workend);
};
var getAddressElement = function getAddressElement(id, addresses) {
  return addresses.find(function (element) {
    return element.addressid === id;
  });
};
var getAddressElementIndex = function getAddressElementIndex(id, addresses) {
  return addresses.findIndex(function (element) {
    return element.addressid === id;
  });
};
var deleteAddresInData = function deleteAddresInData(address) {
  var id = address.querySelector('input').value;
  var data;
  if (_mock.PROFILE.isPickup) {
    data = _mock.PROFILE.addressPickup;
  } else {
    data = _mock.PROFILE.address;
  }
  data.splice(getAddressElementIndex(id, data), 1);
};
var clearAddress = function clearAddress() {
  addressPlace.innerHTML = '';
};
var updateAddress = function updateAddress() {
  var activeAddress = document.querySelector('.radio-modal__input:checked');
  var data;
  if (_mock.PROFILE.isPickup) {
    data = _mock.PROFILE.addressPickup;
    addressTypeInTotal.textContent = 'Доставка в пункт выдачи';
    addressInBusketWhere.textContent = 'Доставка в пункт выдачи';
  } else {
    data = _mock.PROFILE.address;
    addressTypeInTotal.textContent = 'Доставка курьером';
    addressInBusketWhere.textContent = 'Доставка курьером';
  }
  if (activeAddress) {
    addressInTotal.textContent = getAddressElement(activeAddress.value, data).address;
    addressInBusketaddress.textContent = getAddressElement(activeAddress.value, data).address;
    updateRatingTimeAddress(getAddressElement(activeAddress.value, data));
  } else {
    addressInTotal.textContent = 'Выберите адрес';
    addressInBusketaddress.textContent = 'Выберите адрес';
  }
};
var getAddressRadioListener = function getAddressRadioListener(address) {
  address.querySelector('.radio-modal__input').addEventListener('change', function () {
    updateAddress();
  });
};
var getAddress = function getAddress(element) {
  var newAddress = addressTemplate.cloneNode(true);
  newAddress.querySelector('.address__text').textContent = element.address;
  newAddress.querySelector('.radio-modal__input').value = element.addressid;
  return newAddress;
};
var getAddresDeletButton = function getAddresDeletButton(address) {
  address.addEventListener('click', function (event) {
    if (event.target.closest('.address__delete')) {
      deleteAddresInData(address);
      address.remove();
      updateAddress();
    }
  });
};
var renderAddresses = function renderAddresses() {
  var fragment = document.createDocumentFragment();
  var address;
  if (_mock.PROFILE.isPickup) {
    address = _mock.PROFILE.addressPickup;
  } else {
    address = _mock.PROFILE.address;
  }
  address.forEach(function (element) {
    var newAddress = getAddress(element);
    getAddresDeletButton(newAddress);
    getAddressRadioListener(newAddress);
    fragment.append(newAddress);
  });
  addressPlace.append(fragment);
};
var updateTypeDelivery = function updateTypeDelivery() {
  deliveryTypesFields.addEventListener('change', function (event) {
    if (event.target.closest('.delivery-radio')) {
      _mock.PROFILE.isPickup = Boolean(event.target.closest('.delivery-radio').querySelector('.delivery-radio__input').value);
      clearAddress();
      renderAddresses();
    }
  });
};
updateTypeDelivery();
renderAddresses();

},{"./mock":6}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderCards = void 0;
var _mock = require("./mock.js");
var _objects = require("./objects.js");
var _priceUpdate = require("./price-update.js");
var _counter = require("./counter.js");
var _total = require("./total.js");
var cardTemplate = document.querySelector('#card').content.querySelector('.card');
var cardNotAvalibleTemplate = document.querySelector('#not-avalible-card').content.querySelector('.not-avalible-card');
var makerCardTemplate = document.querySelector('#maker').content.querySelector('.maker');
var getAvalibleCards = function getAvalibleCards(cards) {
  var avalible = cards.filter(function (element) {
    return element.isAvalible;
  });
  return avalible;
};
var getNotgetAvalibleCards = function getNotgetAvalibleCards(cards) {
  var avalible = cards.filter(function (element) {
    return !element.isAvalible;
  });
  return avalible;
};
var getMakerCard = function getMakerCard(card, data) {
  var makerCard = makerCardTemplate.cloneNode('true');
  var makerPlace = card.querySelector('.card__manufacturer-link');
  makerCard.querySelector('.maker__name').textContent = data.manufacturer.name;
  makerCard.querySelector('.maker__id').textContent = data.manufacturer.id;
  makerCard.querySelector('.maker__address').textContent = data.manufacturer.address;
  makerPlace.append(makerCard);
};
var setCardDataId = function setCardDataId(card, data) {
  card.dataset.id = data.id;
};
var getWarningAboutAmount = function getWarningAboutAmount(card, amount) {
  if (amount <= _objects.LOW_PRODUCT_AMOUNT) {
    card.querySelector('.card__amount-warning').textContent = "\u041E\u0441\u0442\u0430\u043B\u043E\u0441\u044C ".concat(amount, " \u0448\u0442.");
  }
};
var getDeleteCard = function getDeleteCard(card) {
  card.querySelector('.card__delete').addEventListener('click', function (evt) {
    (0, _counter.removeCounter)(card);
    evt.target.closest('.card').remove();
    (0, _total.updateTotalPrice)();
    (0, _total.updateDeliveryButton)();
  }, true);
};
var getCardProperties = function getCardProperties(card, properties) {
  var propertisContainer = card.querySelector('.card__properties');
  properties.forEach(function (element) {
    var newPropertis = document.createElement('span');
    newPropertis.classList.add('card__property');
    newPropertis.textContent = element;
    propertisContainer.append(newPropertis);
  });
};
var getCardNotAvalibleProperties = function getCardNotAvalibleProperties(card, properties) {
  var propertisContainer = card.querySelector('.card__properties');
  properties.forEach(function (element) {
    var newPropertis = document.createElement('span');
    newPropertis.classList.add('not-avalible-card__property');
    newPropertis.textContent = element;
    propertisContainer.append(newPropertis);
  });
};
var getCard = function getCard(element) {
  var cardElement = cardTemplate.cloneNode('true');
  setCardDataId(cardElement, element);
  cardElement.querySelector('.card__img').src = "img/cards/".concat(element.id, "-product.jpg");
  cardElement.querySelector('.card__title').textContent = element.title;
  cardElement.querySelector('.card__stock').textContent = element.stock;
  getCardProperties(cardElement, element.properties);
  cardElement.querySelector('.card__manufacturer').textContent = element.manufacturer.name;
  cardElement.querySelector('.counter__input').value = element.amount;
  getWarningAboutAmount(cardElement, element.amountLeft);
  (0, _priceUpdate.updatePrice)(cardElement, element);
  return cardElement;
};
var getDeleteNotAvalibleCard = function getDeleteNotAvalibleCard(card) {
  card.querySelector('.not-avalible-card__delete').addEventListener('click', function (evt) {
    evt.target.closest('.not-avalible-card').remove();
  }, true);
};
var getNotAvalibleCard = function getNotAvalibleCard(element) {
  var cardElement = cardNotAvalibleTemplate.cloneNode(true);
  setCardDataId(cardElement, element);
  cardElement.querySelector('.not-avalible-card__img').src = "img/cards/".concat(element.id, "-product.jpg");
  cardElement.querySelector('.not-avalible-card__title').textContent = element.title;
  getCardNotAvalibleProperties(cardElement, element.properties);
  return cardElement;
};
var renderCards = function renderCards(cards, place) {
  var fragment = document.createDocumentFragment();
  var avalibleCards = getAvalibleCards(cards);
  avalibleCards.forEach(function (card) {
    var newCard = getCard(card);
    (0, _counter.addCounter)(newCard);
    getDeleteCard(newCard);
    getMakerCard(newCard, card);
    fragment.append(newCard);
    (0, _total.setSelectedCardListiner)(newCard);
  });
  place.append(fragment);
};
exports.renderCards = renderCards;
var renderNotAvalibleCards = function renderNotAvalibleCards(cards, place) {
  var fragment = document.createDocumentFragment();
  var notAvalibleCards = getNotgetAvalibleCards(cards);
  notAvalibleCards.forEach(function (card) {
    var newCard = getNotAvalibleCard(card);
    getDeleteNotAvalibleCard(newCard);
    fragment.append(newCard);
  });
  place.append(fragment);
};
renderNotAvalibleCards(_mock.CARDS, document.querySelector('.no-avalible__card-container'));
renderCards(_mock.CARDS, document.querySelector('.product__card-container'));

},{"./counter.js":4,"./mock.js":6,"./objects.js":8,"./price-update.js":10,"./total.js":13}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeCounter = exports.addCounter = void 0;
var _mock = require("./mock.js");
var _priceUpdate = require("./price-update.js");
var _searchCard = require("./search-card.js");
var _total = require("./total.js");
var startsCounting = function startsCounting(event) {
  var target = event.target;
  var indicator = target.closest('.counter').querySelector('.counter__input');
  var add = target.closest('.counter').querySelector('.counter__button--plus');
  var minus = target.closest('.counter').querySelector('.counter__button--minus');
  var priceIndicatorContainer = target.closest('.card').querySelector('.card__price-container');
  var currentCardData = (0, _searchCard.searchCard)(target, _mock.CARDS);
  var value = indicator.value;
  if (target.closest('.counter__button--plus')) {
    value++;
  }
  if (target.closest('.counter__button--minus')) {
    value--;
  }
  if (value < 0) {
    value = 0;
    minus.classList.add('counter__button--disabled');
  } else {
    minus.classList.remove('counter__button--disabled');
  }
  if (value > currentCardData.amountLeft) {
    value = currentCardData.amountLeft;
    add.classList.add('counter__button--disabled');
  } else {
    add.classList.remove('counter__button--disabled');
  }
  currentCardData.amount = value;
  indicator.value = value;
  (0, _priceUpdate.updatePrice)(priceIndicatorContainer, currentCardData);
  (0, _total.updateTotalPrice)();
  (0, _total.updateDeliveryButton)();
};
var addCounter = function addCounter(card) {
  var counter = card.querySelector('[data-counter]');
  counter.addEventListener('click', startsCounting);
};
exports.addCounter = addCounter;
var removeCounter = function removeCounter(card) {
  var counter = card.querySelector('[data-counter]');
  counter.removeEventListener('click', startsCounting);
};
exports.removeCounter = removeCounter;

},{"./mock.js":6,"./price-update.js":10,"./search-card.js":12,"./total.js":13}],5:[function(require,module,exports){
"use strict";

var _mock = require("./mock");
var deliveryDateTempalte = document.querySelector('#delivery-card').content.querySelector('.delivery-card');
var deliveryDateImgTempalte = document.querySelector('#delivery-card__img').content.querySelector('.delivery-card__img-container');
var deliveryDateContainer = document.querySelector('.delivery-type__date-container');
var deliveryTotal = document.querySelector('.delivery__date');
var updateDeliveryTotal = function updateDeliveryTotal() {
  deliveryTotal.textContent = _mock.DELIVERY_DATE;
};
var getDeliveryCard = function getDeliveryCard(element) {
  var newDate = deliveryDateTempalte.cloneNode(true);
  var newDateImgContainer = newDate.querySelector('.delivery-card__product-container');
  newDate.querySelector('.delivery-card__date').textContent = element.date;
  element.cards.forEach(function (card) {
    var newImg = deliveryDateImgTempalte.cloneNode(true);
    newImg.querySelector('.delivery-card__img').src = "img/cards/".concat(card.idcard, "-product.jpg");
    newImg.querySelector('.delivery-card__amount').textContent = card.amount;
    newDateImgContainer.append(newImg);
  });
  return newDate;
};
var renderDelivery = function renderDelivery() {
  var fragment = document.createDocumentFragment();
  _mock.DELIVERY.forEach(function (element) {
    var newDate = getDeliveryCard(element);
    fragment.append(newDate);
  });
  deliveryDateContainer.append(fragment);
};
renderDelivery();
updateDeliveryTotal();

},{"./mock":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PROFILE = exports.DELIVERY_DATE = exports.DELIVERY = exports.CARDS = exports.CARD = void 0;
var CARDS = [{
  isAvalible: true,
  id: 1,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO Вайлдберриз',
    id: 1067746062449,
    address: '142181,Московская обл, г.о. Подольск, д Коледино, тер. Индустриальный парк Коледино, д. 6, стр. 1',
    url: ' '
  },
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
}, {
  isAvalible: true,
  id: 2,
  title: 'Силиконовый чехол картхолдер (отверстия) для карт, прозрачный кейс бампер на Apple iPhone XR, MobiSafe',
  properties: ['Цвет: прозрачный'],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO «МЕГАПРОФСТИЛЬ»',
    id: 5167746237148,
    address: '129337, Москва, улица Красная Сосна, 2, корпус 1, стр. 1, помещение 2, офис 34',
    url: ' '
  },
  amount: 200,
  actualPrice: 10500.235,
  oldPrice: 11500.235,
  amountLeft: 1000
}, {
  isAvalible: true,
  id: 3,
  title: 'Карандаши цветные Faber-Castell "Замок", набор 24 цвета, заточенные, шестигранные,Faber-Castell',
  properties: [],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO Вайлдберриз',
    id: 1067746062449,
    address: '142181,Московская обл, г.о. Подольск, д Коледино, тер. Индустриальный парк Коледино, д. 6, стр. 1',
    url: ' '
  },
  amount: 2,
  actualPrice: 247,
  oldPrice: 475,
  amountLeft: 2
}, {
  isAvalible: false,
  id: 4,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO Вайлдберриз',
    id: 1067746062449,
    address: '142181,Московская обл, г.о. Подольск, д Коледино, тер. Индустриальный парк Коледино, д. 6, стр. 1',
    url: ' '
  },
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
}, {
  isAvalible: false,
  id: 5,
  title: 'Силиконовый чехол картхолдер (отверстия) для карт, прозрачный кейс бампер на Apple iPhone XR, MobiSafe',
  properties: ['Цвет: прозрачный'],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO «МЕГАПРОФСТИЛЬ»',
    id: 5167746237148,
    address: '129337, Москва, улица Красная Сосна, 2, корпус 1, стр. 1, помещение 2, офис 34',
    url: ' '
  },
  amount: 200,
  actualPrice: 10500.235,
  oldPrice: 11500.235,
  amountLeft: 1000
}, {
  isAvalible: false,
  id: 6,
  title: 'Карандаши цветные Faber-Castell "Замок", набор 24 цвета, заточенные, шестигранные,Faber-Castell',
  properties: [],
  stock: 'Коледино WB',
  manufacturer: {
    name: 'OOO Вайлдберриз',
    id: 1067746062449,
    address: '142181,Московская обл, г.о. Подольск, д Коледино, тер. Индустриальный парк Коледино, д. 6, стр. 1',
    url: ' '
  },
  amount: 2,
  actualPrice: 247,
  oldPrice: 475,
  amountLeft: 2
}];

// id
// title
// [properties]
// stock
// manufacturer:{name,id,address}
// amount
// price-per-unit
// old-price-per-unit
exports.CARDS = CARDS;
var PROFILE = {
  isPickup: true,
  addressPickup: [{
    address: 'Бишкек, улица Ахматбека Суюмбаева, 12/1',
    addressid: '1',
    rating: 4.99,
    workstart: 9,
    workend: 21
  }, {
    address: 'Бишкек, улица Пушкина, дом Колотушкина',
    addressid: '2',
    rating: 4.56,
    workstart: 10,
    workend: 21
  }, {
    address: 'Бишкек, микрорайон Мажалкыс, улица Ахунбаева Кисы, 23/11',
    addressid: '3',
    rating: 3,
    workstart: 8,
    workend: 18
  }],
  address: [{
    address: 'Бишкек, улица Табышалиева, 57',
    addressid: '1',
    rating: 2,
    workstart: 10,
    workend: 21
  }, {
    address: 'Бишкек, улица Жукеева-Пудовкина, 77/1',
    addressid: '2',
    rating: 3,
    workstart: 7,
    workend: 21
  }, {
    address: 'Бишкек, микрорайон Джал, улица Ахунбаева Исы, 67/1',
    addressid: '3',
    rating: 2.5,
    workstart: 3,
    workend: 22
  }],
  cards: [{
    idcard: 1,
    number: 8931231232152394,
    type: 1,
    date: '01/30'
  }, {
    idcard: 2,
    number: 8341234332157454,
    type: 2,
    date: '01/30'
  }, {
    idcard: 3,
    number: 8346734332157894,
    type: 3,
    date: '01/30'
  }, {
    idcard: 4,
    number: 1234567812341234,
    type: 4,
    date: '01/30'
  }]
};
exports.PROFILE = PROFILE;
var DELIVERY = [{
  date: '5-6 февраля',
  cards: [{
    idcard: 1,
    amount: 1
  }, {
    idcard: 2,
    amount: 184
  }, {
    idcard: 3,
    amount: 2
  }]
}, {
  date: '7-8 февраля',
  cards: [{
    idcard: 2,
    amount: 16
  }]
}];
exports.DELIVERY = DELIVERY;
var DELIVERY_DATE = '5–8 фев';
exports.DELIVERY_DATE = DELIVERY_DATE;
var CARD = {
  id: 1,
  title: 'Футболка UZcotton мужская',
  properties: ['Цвет: белый', 'Размер: 56'],
  stock: 'Коледино WB',
  manufacturer: 'OOO Вайлдберриз',
  amount: 1,
  actualPrice: 522,
  oldPrice: 1051,
  amountLeft: 2
};
exports.CARD = CARD;

},{}],7:[function(require,module,exports){
"use strict";

var _objects = require("./objects");
var deliveryDestinationModalButton = document.querySelector('.delivery__address-setting-button');
var deliveryDestinationModal = document.querySelector('.modal__delivery');
var bankCardModalButton = document.querySelector('.payment-total__type-setting-button');
var bankCardModal = document.querySelector('.modal__payment');
var bankCardModalBuyButton = document.querySelector('.modal__payment-buy');
var deliveryDestinationModalBuyButton = document.querySelector('.modal__delivery-buy');
var deliveryDateButton = document.querySelector('.delivery-type__setting');
var bankCardBasketButton = document.querySelector('.payment-basket__setting');
var modals = document.querySelectorAll('[data-modal]');
modals.forEach(function (element) {
  element.querySelector('.modal__close-button').addEventListener('click', closeModal);
});
function closeModal() {
  document.querySelector('.modal__open').classList.remove('modal__open');
  document.removeEventListener('keydown', onDocumentKeydown);
  document.querySelector('.modal__curtain-open').classList.remove('modal__curtain-open');
}
var openModal = function openModal(modal) {
  modal.classList.add('modal__open');
  modal.closest('.modal').classList.add('modal__curtain-open');
  document.addEventListener('keydown', onDocumentKeydown);
};
function onDocumentKeydown(event) {
  if ((0, _objects.isEscapeKey)(event)) {
    event.preventDefault();
    closeModal();
  }
}
deliveryDestinationModalButton.addEventListener('click', function () {
  openModal(deliveryDestinationModal);
});
bankCardModalButton.addEventListener('click', function () {
  openModal(bankCardModal);
});
bankCardBasketButton.addEventListener('click', function () {
  openModal(bankCardModal);
});
bankCardModalBuyButton.addEventListener('click', function () {
  closeModal();
});
bankCardModalBuyButton.addEventListener('click', function () {
  closeModal();
});
deliveryDestinationModalBuyButton.addEventListener('click', function () {
  closeModal();
});
deliveryDateButton.addEventListener('click', function () {
  openModal(deliveryDestinationModal);
});

},{"./objects":8}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.total = exports.isEscapeKey = exports.basket = exports.MIN_FREE_ORDER_TOTAL_PRICE = exports.LOW_PRODUCT_AMOUNT = void 0;
var LOW_PRODUCT_AMOUNT = 5;
exports.LOW_PRODUCT_AMOUNT = LOW_PRODUCT_AMOUNT;
var MIN_FREE_ORDER_TOTAL_PRICE = 1;
exports.MIN_FREE_ORDER_TOTAL_PRICE = MIN_FREE_ORDER_TOTAL_PRICE;
var basket = document.querySelector('.basket');
exports.basket = basket;
var total = basket.querySelector('.total');
exports.total = total;
var isEscapeKey = function isEscapeKey(event) {
  return event.key === 'Escape';
};
exports.isEscapeKey = isEscapeKey;

},{}],9:[function(require,module,exports){
"use strict";

var _mock = require("./mock.js");
var CARDS = _mock.PROFILE.cards;
var cardTemplate = document.querySelector('#payment').content.querySelector('.payment');
var cardPlace = document.querySelector('.modal__payment-card-place');
var cardPlaceInTotal = document.querySelector('.payment-total__card');
var cardPlaceInBasket = document.querySelector('.payment-basket__card-container');
var getCardElement = function getCardElement(id, cards) {
  return cards.find(function (element) {
    return element.idcard === id;
  });
};
var getCleanCard = function getCleanCard(card) {
  var cleanCard = card;
  cleanCard.querySelector('.radio-modal__control-mark').remove();
  return cleanCard;
};
var updateCardInTotal = function updateCardInTotal() {
  var activeCard = document.querySelector('.payment-radio__input:checked');
  cardPlaceInTotal.innerHTML = '';
  cardPlaceInTotal.append(getCleanCard(getCard(getCardElement(+activeCard.value, CARDS))));
};
var updateCardInBasket = function updateCardInBasket() {
  var activeCard = document.querySelector('.payment-radio__input:checked');
  cardPlaceInBasket.innerHTML = '';
  cardPlaceInBasket.append(getCleanCard(getCard(getCardElement(+activeCard.value, CARDS))));
  cardPlaceInBasket.querySelector('.payment__date').classList.remove('visually-hidden');
};
var getPaymentRadioListener = function getPaymentRadioListener(cards) {
  cards.querySelector('.payment-radio__input').addEventListener('change', function () {
    updateCardInTotal();
    updateCardInBasket();
  });
};
var encryptCardNumber = function encryptCardNumber(number) {
  var numberArray = number.toString().split('');
  numberArray.splice(6, 6, Array(6).fill('*'));
  numberArray = numberArray.flat();
  for (var i = numberArray.length; i > 0; i--) {
    if (i % 4 === 0) {
      numberArray.splice(numberArray.length - i, 0, ' ');
    }
  }
  return numberArray.join('').trim();
};
var getCardIcon = function getCardIcon(card, data) {
  var cardImg = card.querySelector('.payment__card-logo');
  cardImg.setAttribute('xlink:href', "img/sprite.svg#card-icon-".concat(data.type));
};
var getCard = function getCard(card) {
  var newCard = cardTemplate.cloneNode(true);
  newCard.querySelector('.payment__text').textContent = encryptCardNumber(card.number);
  getCardIcon(newCard, card);
  newCard.querySelector('.payment-radio__input').value = card.idcard;
  newCard.querySelector('.payment__date').textContent = card.date;
  return newCard;
};
var renderPaymentCards = function renderPaymentCards() {
  var fragment = document.createDocumentFragment();
  CARDS.forEach(function (element) {
    var newCreditCard = getCard(element);
    getPaymentRadioListener(newCreditCard);
    fragment.append(newCreditCard);
  });
  cardPlace.append(fragment);
};
renderPaymentCards();

},{"./mock.js":6}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePrice = void 0;
var updatePrice = function updatePrice(priceContainer, data) {
  var actualPrice = priceContainer.querySelector('.card__actual-price');
  var oldPrice = priceContainer.querySelector('.card__past-price');
  actualPrice.textContent = "".concat(Math.ceil(data.amount * data.actualPrice), " \u0441\u043E\u043C");
  oldPrice.textContent = "".concat(Math.ceil(data.amount * data.oldPrice), " \u0441\u043E\u043C");
  if ((data.amount * data.actualPrice).toString().length > 5) {
    actualPrice.classList.add('card__actual-price--smaller-letter');
  } else {
    actualPrice.classList.remove('card__actual-price--smaller-letter');
  }
};
exports.updatePrice = updatePrice;

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addShowButtonNotAvalibleListener = exports.addShowButtonListener = void 0;
var _objects = require("./objects.js");
var showCardButton = _objects.basket.querySelector('.product__show-button');
var productBasketContainer = _objects.basket.querySelector('.product__card-container');
var showNotAvalibleCardButton = _objects.basket.querySelector('.no-avalible__show-button');
var productNotAvalibleBasketContainer = _objects.basket.querySelector('.no-avalible__card-container');
var addShowButtonListener = function addShowButtonListener() {
  showCardButton.addEventListener('click', function () {
    showCardButton.classList.toggle('product__show-button--close');
    productBasketContainer.classList.toggle('visually-hidden');
  });
};
exports.addShowButtonListener = addShowButtonListener;
var addShowButtonNotAvalibleListener = function addShowButtonNotAvalibleListener() {
  showNotAvalibleCardButton.addEventListener('click', function () {
    showNotAvalibleCardButton.classList.toggle('no-avalible__show-button--close');
    productNotAvalibleBasketContainer.classList.toggle('visually-hidden');
  });
};
exports.addShowButtonNotAvalibleListener = addShowButtonNotAvalibleListener;

},{"./objects.js":8}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.searchCard = void 0;
var searchCard = function searchCard(element, cards) {
  var id = element.closest('.card').dataset.id;
  return cards.find(function (card) {
    return card.id === +id;
  });
};
exports.searchCard = searchCard;

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateTotalPrice = exports.updateDeliveryButton = exports.setSelectedCardListiner = void 0;
var _mock = require("./mock");
var _objects = require("./objects");
var totalAmountField = document.querySelector('.total__amount-product');
var totalField = document.querySelector('.total__price');
var discountField = document.querySelector('.total__without-discount');
var profitField = document.querySelector('.total__discount');
var deliveryField = document.querySelector('.total__delivery-price');
var buyNowCheckbox = document.querySelector('.payment-total__checkbox > input');
var buyButton = document.querySelector('.total__buy');
var buyLatterText = document.querySelector('.payment-total__description');
var deliveryFree = document.querySelector('.delivery-type__price');
var updateDeliveryButton = function updateDeliveryButton() {
  var total = document.querySelector('.total__price');
  if (buyNowCheckbox.checked) {
    buyButton.textContent = "\u041E\u043F\u043B\u0430\u0442\u0438\u0442\u044C ".concat(total.textContent);
    buyLatterText.classList.add('visually-hidden');
  } else {
    buyButton.textContent = 'Заказать';
    buyLatterText.classList.remove('visually-hidden');
  }
};
exports.updateDeliveryButton = updateDeliveryButton;
buyNowCheckbox.addEventListener('change', updateDeliveryButton);
var prettierPrice = function prettierPrice(total) {
  var totalArray = Math.ceil(total).toString().split('');
  for (var i = totalArray.length; i > 0; i--) {
    if (i % 3 === 0) {
      totalArray.splice(totalArray.length - i, 0, ' ');
    }
  }
  return totalArray.join('').trim() + ' сом';
};
var isDeliveryFree = function isDeliveryFree(total) {
  return total > _objects.MIN_FREE_ORDER_TOTAL_PRICE ? 'Бесплатно' : prettierPrice(total);
};
var prettierAmount = function prettierAmount(amount) {
  var add;
  switch (amount) {
    case 0:
      add = 'товаров';
      break;
    case 1:
      add = 'товар';
      break;
    default:
      add = 'товара';
  }
  return amount + ' ' + add;
};
var updateTotalPrice = function updateTotalPrice() {
  var cards = document.querySelectorAll('.card');
  var total = 0;
  var oldPrice = 0;
  var amount = 0;
  cards.forEach(function (element) {
    var id = element.dataset.id;
    if (element.querySelector('.checkbox__input').checked) {
      total = total + _mock.CARDS[id - 1].amount * _mock.CARDS[id - 1].actualPrice;
      oldPrice = oldPrice + _mock.CARDS[id - 1].amount * _mock.CARDS[id - 1].oldPrice;
      amount = amount + _mock.CARDS[id - 1].amount;
    }
  });
  profitField.textContent = '-' + prettierPrice(oldPrice - total);
  totalAmountField.textContent = prettierAmount(amount);
  totalField.textContent = prettierPrice(total);
  discountField.textContent = prettierPrice(oldPrice);
  deliveryField.textContent = isDeliveryFree(total);
  deliveryFree.textContent = isDeliveryFree(total);
};
exports.updateTotalPrice = updateTotalPrice;
var setSelectedCardListiner = function setSelectedCardListiner(card) {
  var checkbox = card.querySelector('.checkbox__input');
  checkbox.addEventListener('change', function () {
    updateTotalPrice();
    updateDeliveryButton(totalField.textContent);
  });
};
exports.setSelectedCardListiner = setSelectedCardListiner;

},{"./mock":6,"./objects":8}]},{},[1])


//# sourceMappingURL=main.min.js.map
